generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(cuid())
  name                 String?
  email                String              @unique
  password             String
  image                String?
  role                 Role                @default(USER)
  isSuperAdmin         Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  bio                  String?
  city                 String?
  course               String?
  graduationYear       Int?
  isProfilePublic      Boolean             @default(true)
  isVerified           Boolean             @default(false)
  linkedinUrl          String?
  phoneNumber          String?
  university           String?
  membershipExpiryDate DateTime?
  paymentVerified      Boolean             @default(false)
  events               Event[]
  membershipRequests   MembershipRequest[]
  profile              Profile?
  registrations        Registration[]
  resourceViews        ResourceView[]
  teamApplications     TeamApplication[]
  payments             StripePayment[]
  passwordReset        PasswordReset?
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  universityInIndia String?
  degreeInIndia     String?
  yearOfArrival     Int?
  residenceArea     String?
  interests         String?
  skills            String?
  showEmail         Boolean  @default(false)
  showPhone         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MembershipRequest {
  id               String        @id @default(cuid())
  firstName        String
  lastName         String
  email            String
  isStudent        Boolean       @default(true)
  university       String
  codiceFiscale    String?
  status           RequestStatus @default(PENDING)
  paymentReference String?
  notes            String?
  userId           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  reviewedBy       String?
  reviewedAt       DateTime?
  user             User?         @relation(fields: [userId], references: [id])
}

model TeamApplication {
  id          String        @id @default(cuid())
  department  String
  motivation  String?
  status      RequestStatus @default(PENDING)
  notes       String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reviewedBy  String?
  reviewedAt  DateTime?
  paymentId   String?       @unique
  user        User          @relation(fields: [userId], references: [id])
  payment     StripePayment? @relation("TeamApplicationPayment")
}

model Event {
  id            String         @id @default(cuid())
  title         String
  description   String
  content       String?
  location      String
  startDate     DateTime
  endDate       DateTime
  imageUrl      String?
  maxAttendees  Int?
  price         Float?         // Optional price in EUR (null means free)
  requiresPayment Boolean      @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     String
  published     Boolean        @default(false)
  author        User           @relation(fields: [createdBy], references: [id])
  gallery       EventImage[]
  registrations Registration[]
  payments      StripePayment[]
}

model Registration {
  id           String             @id @default(cuid())
  eventId      String
  userId       String
  status       RegistrationStatus @default(PENDING)
  paymentStatus PaymentStatus     @default(UNPAID)
  paymentId    String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  event        Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment      StripePayment?     @relation(fields: [paymentId], references: [id])

  @@unique([eventId, userId])
}

model EventImage {
  id        String   @id @default(cuid())
  eventId   String
  imageUrl  String
  caption   String?
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  responded Boolean  @default(false)
}

model ResourceCategory {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  imageUrl    String?
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  resources   Resource[]
}

model Resource {
  id            String           @id @default(cuid())
  title         String
  description   String
  fileUrl       String
  thumbnailUrl  String?
  categoryId    String
  slug          String           @unique
  featured      Boolean          @default(false)
  resourceType  ResourceType     @default(DOCUMENT)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  viewCount     Int              @default(0)
  downloadCount Int              @default(0)
  category      ResourceCategory @relation(fields: [categoryId], references: [id])
  resourceViews ResourceView[]
}

model ResourceView {
  id         String   @id @default(cuid())
  resourceId String
  userId     String
  viewedAt   DateTime @default(now())
  downloaded Boolean  @default(false)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([resourceId, userId])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StripePayment {
  id                String            @id @default(cuid())
  stripeSessionId   String            @unique
  stripePaymentId   String?
  amount            Float
  currency          String            @default("eur")
  status            PaymentStatus     @default(PENDING)
  paymentType       PaymentType
  userId            String
  eventId           String?
  teamApplicationId String?           @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id])
  event             Event?            @relation(fields: [eventId], references: [id])
  teamApplication   TeamApplication?  @relation("TeamApplicationPayment", fields: [teamApplicationId], references: [id])
  registrations     Registration[]
}

enum Role {
  USER
  ADMIN
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum ResourceType {
  DOCUMENT
  TEMPLATE
  GUIDE
  VIDEO
  LINK
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  UNPAID
}

enum PaymentType {
  EVENT_REGISTRATION
  TEAM_APPLICATION
}

