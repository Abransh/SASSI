import { redirect, notFound } from "next/navigation";
import { getServerSession } from "next-auth/next";
import { authOptions } from "../@/app/api/auth/[...nextauth]/options";
import prisma from "@/lib/prisma";
import Header from "@/components/Header";
import MobileMenu from "@/components/MobileMenu";
import Footer from "@/components/Footer";
import { ChevronLeft, Download, Eye, FileText, Calendar, ArrowUpRight } from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import { getResourceTypeIcon, getResourceTypeName } from "@/lib/resource-utils";
import ResourceViewActions from "@/components/ResourceViewActions";

type Props = {
  params: { id: string };
};

export default async function ResourceViewPage({ params }: Props) {
  // Check if user is logged in
  const session = await getServerSession(authOptions);
  
  if (!session) {
    redirect(`/auth/signin?callbackUrl=/resources/view/${params.id}`);
  }
  
  // Get the resource
  const resource = await prisma.resource.findUnique({
    where: {
      id: params.id,
    },
    include: {
      category: true,
    },
  });
  
  if (!resource) {
    notFound();
  }
  
  // Get related resources from the same category
  const relatedResources = await prisma.resource.findMany({
    where: {
      categoryId: resource.categoryId,
      id: {
        not: resource.id,
      },
    },
    take: 3,
    orderBy: {
      viewCount: "desc",
    },
  });
  
  // Format dates
  const updatedDate = new Date(resource.updatedAt).toLocaleDateString();
  
  // Get resource type icon
  const ResourceTypeIcon = getResourceTypeIcon(resource.resourceType);
  
  return (
    <main className="min-h-screen bg-gray-50">
      <Header />
      <MobileMenu />

      <section className="pt-32 pb-20">
        <div className="container mx-auto px-4">
          <div className="max-w-5xl mx-auto">
            {/* Breadcrumb Navigation */}
            <div className="flex items-center text-sm text-gray-600 mb-6">
              <Link href="/resources" className="hover:text-gray-900">
                Resources
              </Link>
              <span className="mx-2">→</span>
              <Link
                href={`/resources/${resource.category.slug}`}
                className="hover:text-gray-900"
              >
                {resource.category.name}
              </Link>
              <span className="mx-2">→</span>
              <span className="text-gray-400">View Resource</span>
            </div>
            
            {/* Resource Content */}
            <div className="bg-white rounded-lg shadow-md mb-8">
              {/* Resource Header */}
              <div className="p-6 border-b">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center">
                    <div className="p-2 rounded-lg bg-orange-50 text-orange-600 mr-3">
                      <ResourceTypeIcon size={20} />
                    </div>
                    <span className="text-sm font-medium uppercase">
                      {getResourceTypeName(resource.resourceType)}
                    </span>
                  </div>
                  
                  <div className="flex items-center text-sm text-gray-500">
                    <Calendar size={16} className="mr-1" />
                    <span>Updated {updatedDate}</span>
                  </div>
                </div>
                
                <h1 className="text-2xl md:text-3xl font-bold mb-4">{resource.title}</h1>
                
                <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                  <div className="flex items-center">
                    <Eye size={16} className="mr-1" />
                    <span>{resource.viewCount} views</span>
                  </div>
                  <div className="flex items-center">
                    <Download size={16} className="mr-1" />
                    <span>{resource.downloadCount} downloads</span>
                  </div>
                </div>
              </div>
              
              {/* Resource Preview */}
              <div className="p-6">
                {resource.thumbnailUrl && (
                  <div className="mb-6 rounded-lg overflow-hidden">
                    <Image
                      src={resource.thumbnailUrl}
                      alt={resource.title}
                      width={800}
                      height={400}
                      className="w-full h-auto object-cover"
                    />
                  </div>
                )}
                
                <div className="prose max-w-none mb-8">
                  <h2 className="text-xl font-bold mb-4">Description</h2>
                  <p className="whitespace-pre-line">{resource.description}</p>
                </div>
                
                {/* Actions */}
                <div className="mt-8 pt-6 border-t">
                  <ResourceViewActions resource={resource} />
                </div>
              </div>
            </div>
            
            {/* Related Resources */}
            {relatedResources.length > 0 && (
              <div>
                <h2 className="text-xl font-bold mb-4">Related Resources</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {relatedResources.map((related) => (
                    <Link
                      key={related.id}
                      href={`/resources/view/${related.id}`}
                      className="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-start gap-3">
                        <div className="p-2 bg-gray-100 rounded-lg">
                          {getResourceTypeIcon(related.resourceType)({ size: 18 })}
                        </div>
                        <div>
                          <h3 className="font-medium line-clamp-2">{related.title}</h3>
                          <div className="text-xs text-gray-500 mt-1">
                            {getResourceTypeName(related.resourceType)}
                          </div>
                        </div>
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </section>

      <Footer />
    </main>
  );
}